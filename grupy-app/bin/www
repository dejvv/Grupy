#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('grupy-app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**  
 * Import socket.io and attach it to our server
 */
let allClients = [];
const io = require("socket.io")(server);
io.on('connection', (socket) => {
  allClients.push(socket);
  console.log("New user connected!");

  // default username
  socket.username = "Anonymous";
  // if user wants to change username
  socket.on('change_username', (data) => {
    console.log("[sockets] User", socket.username, "changed username to:", data.username);
    socket.username = data.username
  });
  // when user disconnects
  socket.on('disconnect', function() {
    console.log("[sockets] User", socket.username, "disconnected");
    let i = allClients.indexOf(socket);
    allClients.splice(i, 1);
  });
  // listen for messages and then broadcast it to everybody (sockets)
  socket.on('new_message', (data) => {
    io.sockets.emit('incomming_messages', {message: data.message, username: socket.username});
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


